opacity_delta = 0.05; # opacity delta during fade in/out

num_res = 6; # number of reolutions available

max_size = 0.4; # Maximum ammount of height and width that should be used

show_duration = 2; # Minimum of seconds each code is shown

Window.SetBackgroundTopColor (0.2, 0.2, 0.2);
Window.SetBackgroundBottomColor (0.2, 0.2, 0.2);
#----------------------------------------- End Configuration --------------------------------

res = 1;



for (i = 0; i <= 99; i++)
    {
    code[i] = Image.Text ("");
    code_sprite[i] = Sprite(code[i]);
    code_sprite[i].SetOpacity(0);
    }

for (i = 0; i < num_res; i++)
  {
  j = num_res - i;
  code[0] = Image("" + j + "_0.png");
  if (Window.GetWidth() * max_size <= code[0].GetWidth() || Window.GetHeight() * max_size <= code[0].GetHeight())
    {
    res = j;
    }
  }

code[0] = Image("" + res + "_0.png");
screen_ratio = Window.GetHeight() / Window.GetWidth();
code_height = code[0].GetHeight();
code_width = code[0].GetWidth();
code_ratio = code_height / code_width;

if (screen_ratio < code_ratio)
  {
  scale_factor =  Math.Min(Window.GetHeight() / code_height * max_size, 1);
  }
else
  {
  scale_factor =  Math.Min(Window.GetWidth() / code_ratio * max_size, 1);
  }
code_width_scaled = code_width * scale_factor;
code_height_scaled = code_height * scale_factor;
code_x = (Window.GetWidth() - code_width_scaled) / 2;
code_y = (Window.GetHeight() - code_height_scaled) / 2;

fun refresh_callback ()
  {
    # Currently we do nothing here
  }
  
Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Dialogue --------------------------------

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Progress -------------------------------- 

progress_old = -1;
progress_older = -2;
start[progress_old] = -show_duration - 1;
fade_in = 0;

fun progress_callback (duration, progress)
    {
    progress_new = Math.Int(progress * 100);
    if (progress_old != progress_new && start[progress_old] + show_duration < duration && fade_in == 0)
        {
        fade_in = 1;
        progress_older = progress_old;
        progress_old = progress_new;
        code[progress_new] = Image("" + res + "_" + progress_new + ".png");
        scaled_code[progress_new] = code[progress_new].Scale(code_width_scaled, code_height_scaled);
        code_sprite[progress_new].SetImage(scaled_code[progress_new]);
        code_sprite[progress_new].SetOpacity(0);
        code_sprite[progress_new].SetX(code_x);
        code_sprite[progress_new].SetY(code_y);
        code_sprite[progress_new].SetZ(progress_new);
        start[progress_new] = duration;
        }
    if (fade_in == 1)
        {
        code_sprite[progress_old].SetOpacity(Math.Min(code_sprite[progress_old].GetOpacity() + opacity_delta, 1));
        if (code_sprite[progress_old].GetOpacity() == 1)
            {
            fade_in = 0;
            }
        code_sprite[progress_older].SetOpacity(1 - code_sprite[progress_old].GetOpacity());
        }
    }

Plymouth.SetBootProgressFunction(progress_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

Plymouth.SetMessageFunction(message_callback);
